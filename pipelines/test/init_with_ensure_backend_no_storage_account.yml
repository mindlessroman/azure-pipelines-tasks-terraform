jobs:
- job: init_with_ensure_backend_no_storage_account
  steps:
    - task: DownloadPipelineArtifact@2
      displayName: download terraform templates
      inputs: 
        artifact: terraform_templates
        path: $(terraform_extension_dir)
    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: 0.14.3
    - task: TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        workingDirectory: $(terraform_templates_dir)
        backendType: azurerm
        backendServiceArm: 'env_test'
        ensureBackend: true
        backendAzureRmResourceGroupName: '$(backend_arm_resource_group)$(Build.BuildId)'
        backendAzureRmResourceGroupLocation: '$(backend_arm_location)'
        backendAzureRmStorageAccountName: '$(backend_arm_storage_name)$(Build.BuildId)'
        backendAzureRmStorageAccountSku: '$(backend_arm_storage_sku)'
        backendAzureRmContainerName: '$(backend_arm_storage_container)$(Build.BuildId)'
        backendAzureRmKey: init_ensure_backend_no_storage_$(Build.BuildId).tfstate
    - task: AzureCLI@1
      displayName: delete created storage account
      ## make sure the resource group is cleaned up even if init fails
      condition: succeededOrFailed()
      inputs:
        azureSubscription: 'env_test'
        scriptLocation: inlineScript
        inlineScript: |
          exists=$(az group exists -n $(backend_arm_resource_group)$(Build.BuildId))
          if [ $exists == 'true' ]
          then
            az group delete -n $(backend_arm_resource_group)$(Build.BuildId) -y
          fi